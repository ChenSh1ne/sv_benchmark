library(devtools)
library(testthat)
library(roxygen2)
library(assertthat)
library(StructuralVariantAnnotation)
install_github("d-cameron/StructuralVariantAnnotation")
library(StructuralVariantAnnotation)
source('C:/dev/sv_benchmark/sv_benchmark.R')
LoadMetadata("data.aligner")
getwd()
list.files("data.aligner", pattern="*.metadata$")
directory="data.aligner"
source('C:/dev/sv_benchmark/sv_benchmark.R')
write("Loading metadata", stderr())
fileList <- list.files(directory, pattern="*.metadata$")
zeroSizeFiles = file.info(fileList)$size == 0
if (any(zeroSizeFiles)) {
warning(paste("Skipping files", fileList[zeroSizeFiles], "as they have 0 size."))
fileList <- fileList[!zeroSizeFiles]
}
file.info(fileList)$size
file.info(fileList)
list.files()
?list.files
source('C:/dev/sv_benchmark/sv_benchmark.R')
fileList <- list.files(directory, pattern="*.metadata$", full.names=TRUE)
zeroSizeFiles = file.info(fileList)$size == 0
if (any(zeroSizeFiles)) {
warning(paste("Skipping files", fileList[zeroSizeFiles], "as they have 0 size."))
fileList <- fileList[!zeroSizeFiles]
}
metadata <- lapply(fileList, function(filename) {
md <- read.csv(filename, header=FALSE, sep="=", quote = "\"'", col.names=c("CX", "V"))
md$File <- filename
md$Id <- GetMetadataId(filename)
md
})
source('C:/dev/sv_benchmark/sv_benchmark.R')
?cast
GetMetadataId <- function(filenames) {
return (regmatches(as.character(filenames), regexpr("[0-9a-f]{32}", as.character(filenames))))
}
metadata <- lapply(fileList, function(filename) {
md <- read.csv(filename, header=FALSE, sep="=", quote = "\"'", col.names=c("CX", "V"))
md$File <- filename
md$Id <- GetMetadataId(filename)
md
})
metadata <- do.call(rbind, metadata)
metadata <- data.frame(lapply(metadata, as.character), stringsAsFactors=FALSE)
metadata <- cast(metadata, File + Id ~ CX, value="V")  # pivot on context name
library(reshape)
metadata <- cast(metadata, File + Id ~ CX, value="V")  # pivot on context name
rownames(metadata) <- metadata$Id
# transform known numeric data to expected type
metadata$CX_READ_FRAGMENT_LENGTH <- as.numeric(as.character(metadata$CX_READ_FRAGMENT_LENGTH))
metadata$CX_READ_LENGTH <- as.numeric(as.character(metadata$CX_READ_LENGTH))
metadata$CX_READ_DEPTH <- as.numeric(as.character(metadata$CX_READ_DEPTH))
metadata$CX_ALIGNER_SOFTCLIP <- as.numeric(as.character(metadata$CX_ALIGNER_SOFTCLIP))
View(metadata)
source('C:/dev/sv_benchmark/sv_benchmark.R')
write(paste(nrow(metadata), "metadata files loaded"), stderr())
return(metadata)
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
GetMetadataId <- function(filenames) {
return (regmatches(as.character(filenames), regexpr("[0-9a-f]{32}", as.character(filenames))))
}
test_that("GetMetadataId", {
expect_equal(
c("a", "m", "bin"),
GetMetadataId(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin")))
})
source('C:/dev/sv_benchmark/sv_benchmark.R')
?regmatches
?stringr
library(stringr)
strings <- c(" 219 733 8965", "329-293-8753 ", "banana", "595 794 7569",
"387 287 6718", "apple", "233.398.9187  ", "482 952 3315",
"239 923 8115 and 842 566 4692", "Work: 579-499-7527", "$1000",
"Home: 543.355.3679")
phone <- "([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})"
str_extract(strings, phone)
str_match(strings, phone)
source('C:/dev/sv_benchmark/sv_benchmark.R')
GetMetadataId <- function(filenames) {
return(str_match(as.character(filenames), "([^.\\/]+)[^\\/$"))
}
test_that("GetMetadataId", {
expect_equal(
c("a", "m", "bin"),
GetMetadataId(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin")))
})
GetMetadataId(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"))
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
GetMetadataId(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"))
str_match(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"), "([^.\\/]+)(\\.[^\\/])*$")
str_match(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"), "([^.\\/]+)(\\.[^\\/])*$")
str_match(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"), "([^]+)(\\.[^\\/])*$")
str_match(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"), "([]+)(\\.[^\\/])*$")
str_match(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"), "([^/]+)(\\.[^\\/])*$")
str_match(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"), "([^/]+)")
str_match(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"), "([^/]+)$")
str_match(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"), "([^/\\]+)$")
str_match(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"), "([^/\\\]+)$")
str_match(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"), "([^/\\\\]+)$")
str_match(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"), "([^/\\\\]+)(\\.[^/\\\\]*)*$")
str_match(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"), "([^./\\\\]+)(\\.[^/\\\\]*)*$")
source('C:/dev/sv_benchmark/sv_benchmark.R')
?basename
basename(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin"))
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
vcf <- readVcf("C:/dev/sv_benchmark/data.aligner/0e6718d666c614278fdd113f48eba3cc.vcf")
vcf <- readVcf("C:/dev/sv_benchmark/data.aligner/0e6718d666c614278fdd113f48eba3cc.vcf", NA)
vcf <- readVcf("C:/dev/sv_benchmark/data.aligner/0e6718d666c614278fdd113f48eba3cc.vcf", "unknown")
vcf <- readVcf("C:/dev/sv_benchmark/data.aligner/0e6718d666c614278fdd113f48eba3cc.vcf", "hg19")
gr <- breakpointRanges(vcf)
vcf <- readVcf("C:/dev/sv_benchmark/data.aligner/5afa7ffdf2cc32602476526d5b477c5c.vcf", "hg19")
gr <- breakpointRanges(vcf)
vcf
head(vcf)
rowRanges(vcf)
gr <- breakpointRanges(vcf)
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
install_github("d-cameron/StructuralVariantAnnotation")
gr <- breakpointRanges(vcf)
gr
head(gr)
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
%na%
StructuralVariantAnnotation::%na%
StructuralVariantAnnotation:::%na%
1 StructuralVariantAnnotation:::%na% 2
1 StructuralVariantAnnotation::%na% 2
1 %na% 2
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
gr
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
LoadMinimalSVs("data.aligner/5afa7ffdf2cc32602476526d5b477c5c.vcf", "delly")
source('C:/dev/sv_benchmark/sv_benchmark.R')
LoadMinimalSVs("data.aligner/5afa7ffdf2cc32602476526d5b477c5c.vcf", "delly")
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
metadata
metadata$CX_CALLER[metadata$Id == GetMetadataId("5afa7ffdf2cc32602476526d5b477c5c.vcf"),]
metadata$CX_CALLER[metadata$Id == GetMetadataId("5afa7ffdf2cc32602476526d5b477c5c.vcf")]
metadata$CX_CALLER[metadata$Id == GetMetadataId("5afa7ffdf2cc32602476526d5b477c5casd.vcf")]
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
LoadVCFs("data.aligner", metadata=metadata)
source('C:/dev/sv_benchmark/sv_benchmark.R')
LoadVCFs("data.aligner", metadata=metadata)
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
expect_equal(c(), GetMetadataId(c()))
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
filanems
length("123")
length("1232442")
length(c())
cf
source('C:/dev/sv_benchmark/sv_benchmark.R')
expect_equal(c(), GetId(c()))
GetId(c())
c()
expect_equal(character(0), GetId(c()))
expect_equal(c("a", "m", "bin"),
GetId(c("a", "C:\\directory\\m.as.ds.dsa.ss.vcf", "/usr/local/bin")))
expect_equal(character(0), GetId(c()))
expect_equal(character(0), GetId(NULL))
source('C:/dev/sv_benchmark/sv_benchmark.R')
expect_equal(NA, GetId(NA))
source('C:/dev/sv_benchmark/sv_benchmark.R')
expect_equal(NA, GetId(NA))
as.character(NA)
as.character(NA_integer_)
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
source('C:/dev/sv_benchmark/sv_benchmark.R')
?all.na
str_match(c(1, NA), "([^.]+)(\\..*)*$")[,2]
str_match(c(1, NA, NA), "([^.]+)(\\..*)*$")[,2]
str_match(c(NA, NA), "([^.]+)(\\..*)*$")[,2]
str_match(c(NA, NA, 1), "([^.]+)(\\..*)*$")[,2]
all.na()
?all
?is.na
source('C:/dev/sv_benchmark/sv_benchmark.R')
LoadVCFs("data.aligner", metadata=metadata)
source('C:/dev/sv_benchmark/sv_benchmark.R')
LoadVCFs("data.aligner", metadata=metadata)
source('C:/dev/sv_benchmark/sv_benchmark.R')
LoadVCFs("data.aligner", metadata=metadata)
source('C:/dev/sv_benchmark/sv_benchmark.R')
directory="data.aligner"
pattern="*.vcf$"
existingList=NULL
write("Loading VCFs", stderr())
filenames <- list.files(directory, pattern=pattern)
zeroSizeFiles = file.info(filenames)$size == 0
zeroSizeFiles
file.info(filenames)
source('C:/dev/sv_benchmark/sv_benchmark.R')
filenames <- list.files(directory, pattern=pattern, full.names=TRUE)
zeroSizeFiles = file.info(filenames)$size == 0
if (any(zeroSizeFiles)) {
write(paste("Skipping file", filenames[zeroSizeFiles], "due to 0 size.\n"))
warning(paste("Skipping files", paste(filenames[zeroSizeFiles]), "due to 0 size.\n"))
filenames <- filenames[!zeroSizeFiles]
}
# exclude already loaded VCFs
filenames <- filenames[!(GetId(filenames) %in% names(existingList))]
# only load VCFS that have metadata
#if (!is.null(metadata)) {
#	filenames <- filenames[GetId(filenames) %in% metadata$Id]
#}
#vcfs <- foreach (filename=filenames, .packages="VariantAnnotation") %dopar% { # Parallel load of VCFs
grlist <- lapply(filenames, function(filename) {
write(paste0("Loading ", filename), stderr())
caller <- NULL
if (!is.null(metadata)) {
caller <- metadata$CX_CALLER[metadata$Id == GetId(filename),]
}
gr <- LoadMinimalSVs(filename, caller)
return (gr)
})
metadata$CX_CALLER
filename=filenames[1]
caller <- metadata$CX_CALLER[metadata$Id == GetId(filename),]
caller
GetId(filename)
caller <- metadata$CX_CALLER[metadata$Id == GetId(filename)]
source('C:/dev/sv_benchmark/sv_benchmark.R')
remove("caller")
grlist <- lapply(filenames, function(filename) {
write(paste0("Loading ", filename), stderr())
caller <- NULL
if (!is.null(metadata)) {
caller <- metadata$CX_CALLER[metadata$Id == GetId(filename)]
}
gr <- LoadMinimalSVs(filename, caller)
return (gr)
})
source('C:/dev/sv_benchmark/sv_benchmark.R')
